{"version":3,"file":"index.common.js","sources":["../../core/dist/index.esm.js","../src/index.ts"],"sourcesContent":["/**\n * @easy-cipher/core@1.0.1\n * Copyright (c) 2021 Bartłomiej Wiśniewski\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst empty = \"\";\nconst space = \" \";\nconst core = ({\n  mappings,\n  ciphertextWordsSeparator = space,\n  ciphertextCharactersSeparator = empty,\n  plaintextWordsSeparator = space,\n  plaintextCharactersSeparator = empty,\n}) => {\n  const reversedMappings = Object.entries(mappings).reduce(\n    (acc, [x, y]) => ({ ...acc, [y]: x }),\n    {}\n  );\n  const encode = (\n    plaintext,\n    { throwOnUnknownCharacters } = { throwOnUnknownCharacters: true }\n  ) => {\n    return plaintext\n      .split(plaintextWordsSeparator)\n      .map((plaintextWord) =>\n        plaintextWord\n          .split(plaintextCharactersSeparator)\n          .map((plaintextCharacter) => {\n            const mapping = mappings[plaintextCharacter];\n            if (mapping) {\n              return mapping;\n            }\n            if (throwOnUnknownCharacters) {\n              throw new Error(\n                `Unsupported character ${JSON.stringify(\n                  plaintextCharacter\n                )}, not found in ${JSON.stringify(mappings)}`\n              );\n            }\n            return empty;\n          })\n          .join(ciphertextCharactersSeparator)\n      )\n      .join(ciphertextWordsSeparator);\n  };\n  const decode = (\n    ciphertext,\n    { throwOnUnknownCharacters } = { throwOnUnknownCharacters: true }\n  ) => {\n    return ciphertext\n      .split(ciphertextWordsSeparator)\n      .map((ciphertextWord) =>\n        ciphertextWord\n          .split(ciphertextCharactersSeparator)\n          .map((ciphertextCharacter) => {\n            const character = reversedMappings[ciphertextCharacter];\n            if (character) {\n              return character;\n            }\n            if (throwOnUnknownCharacters) {\n              throw new Error(\n                `Unsupported ciphertext ${JSON.stringify(\n                  ciphertextCharacter\n                )}, not found in ${JSON.stringify(reversedMappings)}`\n              );\n            }\n            return empty;\n          })\n          .join(plaintextCharactersSeparator)\n      )\n      .join(plaintextWordsSeparator);\n  };\n  return {\n    encode,\n    decode,\n  };\n};\n\nexport { core };\n//# sourceMappingURL=index.esm.js.map\n","import { core } from '@easy-cipher/core';\nimport type { CoreOptions } from '@easy-cipher/core';\n\ntype CaesarOptions = {\n  encryptionOffset: number;\n  alphabet?: string[];\n} & Omit<CoreOptions, 'mappings'>;\n\nconst defaultAlphabet = 'abcdefghijklmnopqrstuvwxyz'.split('');\nconst caesar = ({\n  encryptionOffset,\n  alphabet = defaultAlphabet,\n  ciphertextWordsSeparator,\n  ciphertextCharactersSeparator,\n  plaintextWordsSeparator,\n  plaintextCharactersSeparator,\n}: CaesarOptions) => {\n  const offset =\n    encryptionOffset > 0\n      ? encryptionOffset % alphabet.length\n      : alphabet.length + (encryptionOffset % alphabet.length);\n  const mappings = alphabet.reduce(\n    (acc, character, index, alphabet) => ({\n      ...acc,\n      [character]: alphabet[(index + offset) % alphabet.length],\n    }),\n    {}\n  );\n  return core({\n    mappings,\n    ciphertextWordsSeparator,\n    ciphertextCharactersSeparator,\n    plaintextWordsSeparator,\n    plaintextCharactersSeparator,\n  });\n};\n\nexport { caesar };\n"],"names":[],"mappings":"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"}