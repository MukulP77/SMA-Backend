{"version":3,"file":"index.umd.js","sources":["../../core/dist/index.esm.js","../src/index.ts"],"sourcesContent":["/**\n * @easy-cipher/core@1.0.1\n * Copyright (c) 2021 Bartłomiej Wiśniewski\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst empty = \"\";\nconst space = \" \";\nconst core = ({\n  mappings,\n  ciphertextWordsSeparator = space,\n  ciphertextCharactersSeparator = empty,\n  plaintextWordsSeparator = space,\n  plaintextCharactersSeparator = empty,\n}) => {\n  const reversedMappings = Object.entries(mappings).reduce(\n    (acc, [x, y]) => ({ ...acc, [y]: x }),\n    {}\n  );\n  const encode = (\n    plaintext,\n    { throwOnUnknownCharacters } = { throwOnUnknownCharacters: true }\n  ) => {\n    return plaintext\n      .split(plaintextWordsSeparator)\n      .map((plaintextWord) =>\n        plaintextWord\n          .split(plaintextCharactersSeparator)\n          .map((plaintextCharacter) => {\n            const mapping = mappings[plaintextCharacter];\n            if (mapping) {\n              return mapping;\n            }\n            if (throwOnUnknownCharacters) {\n              throw new Error(\n                `Unsupported character ${JSON.stringify(\n                  plaintextCharacter\n                )}, not found in ${JSON.stringify(mappings)}`\n              );\n            }\n            return empty;\n          })\n          .join(ciphertextCharactersSeparator)\n      )\n      .join(ciphertextWordsSeparator);\n  };\n  const decode = (\n    ciphertext,\n    { throwOnUnknownCharacters } = { throwOnUnknownCharacters: true }\n  ) => {\n    return ciphertext\n      .split(ciphertextWordsSeparator)\n      .map((ciphertextWord) =>\n        ciphertextWord\n          .split(ciphertextCharactersSeparator)\n          .map((ciphertextCharacter) => {\n            const character = reversedMappings[ciphertextCharacter];\n            if (character) {\n              return character;\n            }\n            if (throwOnUnknownCharacters) {\n              throw new Error(\n                `Unsupported ciphertext ${JSON.stringify(\n                  ciphertextCharacter\n                )}, not found in ${JSON.stringify(reversedMappings)}`\n              );\n            }\n            return empty;\n          })\n          .join(plaintextCharactersSeparator)\n      )\n      .join(plaintextWordsSeparator);\n  };\n  return {\n    encode,\n    decode,\n  };\n};\n\nexport { core };\n//# sourceMappingURL=index.esm.js.map\n","import { core } from '@easy-cipher/core';\nimport type { CoreOptions } from '@easy-cipher/core';\n\ntype CaesarOptions = {\n  encryptionOffset: number;\n  alphabet?: string[];\n} & Omit<CoreOptions, 'mappings'>;\n\nconst defaultAlphabet = 'abcdefghijklmnopqrstuvwxyz'.split('');\nconst caesar = ({\n  encryptionOffset,\n  alphabet = defaultAlphabet,\n  ciphertextWordsSeparator,\n  ciphertextCharactersSeparator,\n  plaintextWordsSeparator,\n  plaintextCharactersSeparator,\n}: CaesarOptions) => {\n  const offset =\n    encryptionOffset > 0\n      ? encryptionOffset % alphabet.length\n      : alphabet.length + (encryptionOffset % alphabet.length);\n  const mappings = alphabet.reduce(\n    (acc, character, index, alphabet) => ({\n      ...acc,\n      [character]: alphabet[(index + offset) % alphabet.length],\n    }),\n    {}\n  );\n  return core({\n    mappings,\n    ciphertextWordsSeparator,\n    ciphertextCharactersSeparator,\n    plaintextWordsSeparator,\n    plaintextCharactersSeparator,\n  });\n};\n\nexport { caesar };\n"],"names":["defaultAlphabet","split","encryptionOffset","alphabet","ciphertextWordsSeparator","ciphertextCharactersSeparator","plaintextWordsSeparator","plaintextCharactersSeparator","offset","length","mappings","reversedMappings","Object","entries","reduce","acc","x","y","[object Object]","encode","plaintext","throwOnUnknownCharacters","map","plaintextWord","plaintextCharacter","mapping","Error","JSON","stringify","join","decode","ciphertext","ciphertextWord","ciphertextCharacter","character","core","index"],"mappings":";;;;;;;8PAOA,MCCMA,EAAkB,6BAA6BC,MAAM,aAC5C,EACbC,iBAAAA,EACAC,SAAAA,EAAWH,EACXI,yBAAAA,EACAC,8BAAAA,EACAC,wBAAAA,EACAC,6BAAAA,MAEA,MAAMC,EACJN,EAAmB,EACfA,EAAmBC,EAASM,OAC5BN,EAASM,OAAUP,EAAmBC,EAASM,OAQrD,MDnBW,GACXC,SAAAA,EACAN,yBAAAA,EAHY,IAIZC,8BAAAA,EALY,GAMZC,wBAAAA,EALY,IAMZC,6BAAAA,EAPY,OASZ,MAAMI,EAAmBC,OAAOC,QAAQH,GAAUI,QAChD,CAACC,GAAMC,EAAGC,UAAaF,EAAKG,CAACD,GAAID,KACjC,IAwDF,MAAO,CACLG,OAvDa,CACbC,GACEC,yBAAAA,GAA6B,CAAEA,0BAA0B,KAEpDD,EACJnB,MAAMK,GACNgB,KAAKC,GACJA,EACGtB,MAAMM,GACNe,KAAKE,IACJ,MAAMC,EAAUf,EAASc,GACzB,GAAIC,EACF,OAAOA,EAET,GAAIJ,EACF,MAAM,IAAIK,MACR,yBAAyBC,KAAKC,UAC5BJ,oBACiBG,KAAKC,UAAUlB,MAGtC,MAlCE,MAoCHmB,KAAKxB,KAETwB,KAAKzB,GA+BR0B,OA7Ba,CACbC,GACEV,yBAAAA,GAA6B,CAAEA,0BAA0B,KAEpDU,EACJ9B,MAAMG,GACNkB,KAAKU,GACJA,EACG/B,MAAMI,GACNiB,KAAKW,IACJ,MAAMC,EAAYvB,EAAiBsB,GACnC,GAAIC,EACF,OAAOA,EAET,GAAIb,EACF,MAAM,IAAIK,MACR,0BAA0BC,KAAKC,UAC7BK,oBACiBN,KAAKC,UAAUjB,MAGtC,MA7DE,MA+DHkB,KAAKtB,KAETsB,KAAKvB,KC5CH6B,CAAK,CACVzB,SAReP,EAASW,QACxB,CAACC,EAAKmB,EAAWE,EAAOjC,SACnBY,EACHG,CAACgB,GAAY/B,GAAUiC,EAAQ5B,GAAUL,EAASM,WAEpD,IAIAL,yBAAAA,EACAC,8BAAAA,EACAC,wBAAAA,EACAC,6BAAAA"}