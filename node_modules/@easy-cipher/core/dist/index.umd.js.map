{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["type CoreOptions = {\n  mappings: Record<string, string>;\n  ciphertextWordsSeparator?: string;\n  ciphertextCharactersSeparator?: string;\n  plaintextWordsSeparator?: string;\n  plaintextCharactersSeparator?: string;\n};\n\ntype EncodeOptions = {\n  throwOnUnknownCharacters?: boolean;\n};\ntype DecodeOptions = {\n  throwOnUnknownCharacters?: boolean;\n};\ntype Encode = (sentence: string, options?: EncodeOptions) => string;\ntype Decode = (cipher: string, options?: DecodeOptions) => string;\n\ntype Core = (options: CoreOptions) => {\n  encode: Encode;\n  decode: Decode;\n};\n\nconst empty = '';\nconst space = ' ';\n\nconst core: Core = ({\n  mappings,\n  ciphertextWordsSeparator = space,\n  ciphertextCharactersSeparator = empty,\n  plaintextWordsSeparator = space,\n  plaintextCharactersSeparator = empty,\n}) => {\n  const reversedMappings = Object.entries(mappings).reduce(\n    (acc, [x, y]) => ({ ...acc, [y as string]: x }),\n    {}\n  ) as Record<string, string>;\n\n  const encode: Encode = (\n    plaintext,\n    { throwOnUnknownCharacters } = { throwOnUnknownCharacters: true }\n  ) => {\n    return plaintext\n      .split(plaintextWordsSeparator)\n      .map((plaintextWord) =>\n        plaintextWord\n          .split(plaintextCharactersSeparator)\n          .map((plaintextCharacter) => {\n            const mapping =\n              mappings[plaintextCharacter as keyof typeof mappings];\n            if (mapping) {\n              return mapping;\n            }\n            if (throwOnUnknownCharacters) {\n              throw new Error(`Unsupported character ${JSON.stringify(plaintextCharacter)}, not found in ${JSON.stringify(mappings)}`);\n            }\n            return empty;\n          })\n          .join(ciphertextCharactersSeparator)\n      )\n      .join(ciphertextWordsSeparator);\n  };\n\n  const decode: Decode = (\n    ciphertext: string,\n    { throwOnUnknownCharacters } = { throwOnUnknownCharacters: true }\n  ) => {\n    return ciphertext\n      .split(ciphertextWordsSeparator)\n      .map((ciphertextWord) =>\n        ciphertextWord\n          .split(ciphertextCharactersSeparator)\n          .map((ciphertextCharacter) => {\n            const character =\n              reversedMappings[\n                ciphertextCharacter as keyof typeof reversedMappings\n              ];\n            if (character) {\n              return character;\n            }\n            if (throwOnUnknownCharacters) {\n              throw new Error(`Unsupported ciphertext ${JSON.stringify(ciphertextCharacter)}, not found in ${JSON.stringify(reversedMappings)}`);\n            }\n            return empty;\n          })\n          .join(plaintextCharactersSeparator)\n      )\n      .join(plaintextWordsSeparator);\n  };\n\n  return {\n    encode,\n    decode,\n  };\n};\n\nexport { core };\nexport type { Encode, Decode, CoreOptions };\n"],"names":["mappings","ciphertextWordsSeparator","ciphertextCharactersSeparator","plaintextWordsSeparator","plaintextCharactersSeparator","reversedMappings","Object","entries","reduce","acc","x","y","[object Object]","encode","plaintext","throwOnUnknownCharacters","split","map","plaintextWord","plaintextCharacter","mapping","Error","JSON","stringify","join","decode","ciphertext","ciphertextWord","ciphertextCharacter","character"],"mappings":";;;;;;;mQAyBmB,EACjBA,SAAAA,EACAC,yBAAAA,EAJY,IAKZC,8BAAAA,EANY,GAOZC,wBAAAA,EANY,IAOZC,6BAAAA,EARY,OAUZ,MAAMC,EAAmBC,OAAOC,QAAQP,GAAUQ,QAChD,CAACC,GAAMC,EAAGC,UAAaF,EAAKG,CAACD,GAAcD,KAC3C,IAuDF,MAAO,CACLG,OArDqB,CACrBC,GACEC,yBAAAA,GAA6B,CAAEA,0BAA0B,KAEpDD,EACJE,MAAMb,GACNc,KAAKC,GACJA,EACGF,MAAMZ,GACNa,KAAKE,IACJ,MAAMC,EACJpB,EAASmB,GACX,GAAIC,EACF,OAAOA,EAET,GAAIL,EACF,MAAM,IAAIM,MAAM,yBAAyBC,KAAKC,UAAUJ,oBAAqCG,KAAKC,UAAUvB,MAE9G,MAjCE,MAmCHwB,KAAKtB,KAETsB,KAAKvB,GAgCRwB,OA7BqB,CACrBC,GACEX,yBAAAA,GAA6B,CAAEA,0BAA0B,KAEpDW,EACJV,MAAMf,GACNgB,KAAKU,GACJA,EACGX,MAAMd,GACNe,KAAKW,IACJ,MAAMC,EACJxB,EACEuB,GAEJ,GAAIC,EACF,OAAOA,EAET,GAAId,EACF,MAAM,IAAIM,MAAM,0BAA0BC,KAAKC,UAAUK,oBAAsCN,KAAKC,UAAUlB,MAEhH,MA5DE,MA8DHmB,KAAKpB,KAEToB,KAAKrB"}