{"version":3,"file":"index.common.js","sources":["../src/index.ts"],"sourcesContent":["type CoreOptions = {\n  mappings: Record<string, string>;\n  ciphertextWordsSeparator?: string;\n  ciphertextCharactersSeparator?: string;\n  plaintextWordsSeparator?: string;\n  plaintextCharactersSeparator?: string;\n};\n\ntype EncodeOptions = {\n  throwOnUnknownCharacters?: boolean;\n};\ntype DecodeOptions = {\n  throwOnUnknownCharacters?: boolean;\n};\ntype Encode = (sentence: string, options?: EncodeOptions) => string;\ntype Decode = (cipher: string, options?: DecodeOptions) => string;\n\ntype Core = (options: CoreOptions) => {\n  encode: Encode;\n  decode: Decode;\n};\n\nconst empty = '';\nconst space = ' ';\n\nconst core: Core = ({\n  mappings,\n  ciphertextWordsSeparator = space,\n  ciphertextCharactersSeparator = empty,\n  plaintextWordsSeparator = space,\n  plaintextCharactersSeparator = empty,\n}) => {\n  const reversedMappings = Object.entries(mappings).reduce(\n    (acc, [x, y]) => ({ ...acc, [y as string]: x }),\n    {}\n  ) as Record<string, string>;\n\n  const encode: Encode = (\n    plaintext,\n    { throwOnUnknownCharacters } = { throwOnUnknownCharacters: true }\n  ) => {\n    return plaintext\n      .split(plaintextWordsSeparator)\n      .map((plaintextWord) =>\n        plaintextWord\n          .split(plaintextCharactersSeparator)\n          .map((plaintextCharacter) => {\n            const mapping =\n              mappings[plaintextCharacter as keyof typeof mappings];\n            if (mapping) {\n              return mapping;\n            }\n            if (throwOnUnknownCharacters) {\n              throw new Error(`Unsupported character ${JSON.stringify(plaintextCharacter)}, not found in ${JSON.stringify(mappings)}`);\n            }\n            return empty;\n          })\n          .join(ciphertextCharactersSeparator)\n      )\n      .join(ciphertextWordsSeparator);\n  };\n\n  const decode: Decode = (\n    ciphertext: string,\n    { throwOnUnknownCharacters } = { throwOnUnknownCharacters: true }\n  ) => {\n    return ciphertext\n      .split(ciphertextWordsSeparator)\n      .map((ciphertextWord) =>\n        ciphertextWord\n          .split(ciphertextCharactersSeparator)\n          .map((ciphertextCharacter) => {\n            const character =\n              reversedMappings[\n                ciphertextCharacter as keyof typeof reversedMappings\n              ];\n            if (character) {\n              return character;\n            }\n            if (throwOnUnknownCharacters) {\n              throw new Error(`Unsupported ciphertext ${JSON.stringify(ciphertextCharacter)}, not found in ${JSON.stringify(reversedMappings)}`);\n            }\n            return empty;\n          })\n          .join(plaintextCharactersSeparator)\n      )\n      .join(plaintextWordsSeparator);\n  };\n\n  return {\n    encode,\n    decode,\n  };\n};\n\nexport { core };\nexport type { Encode, Decode, CoreOptions };\n"],"names":[],"mappings":";;;;;;;;;;;AAsBA,MAAM,KAAK,KAAK,CAAC;AACjB,MAAM,KAAK,MAAM,CAAC;MAEZ,IAAI,GAAS,CAAC;EAClB,QAAQ;EACR,wBAAwB,GAAG,KAAK;EAChC,6BAA6B,GAAG,KAAK;EACrC,uBAAuB,GAAG,KAAK;EAC/B,4BAA4B,GAAG,KAAK;CACrC;EACC,MAAM,gBAAgB,GAAG,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,MAAM;IACtD,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,EAAE,GAAG,GAAG,EAAE,CAAC,CAAW,GAAG,CAAC,EAAE,CAAC;IAC/C;EAAE,CACuB,CAAC;EAE5B,MAAM,MAAM,GAAW;IACrB,SAAS;IACT,EAAE,wBAAwB,EAAE,GAAG,EAAE,wBAAwB,EAAE,IAAI;EAAE;IAEjE,OAAO,SAAS;OACb,KAAK,CAAC,uBAAuB,CAAC;OAC9B,GAAG,CAAC,CAAC,aAAa;QACjB,aAAa;WACV,KAAK,CAAC,4BAA4B,CAAC;WACnC,GAAG,CAAC,CAAC,kBAAkB;YACtB,MAAM,OAAO,GACX,QAAQ,CAAC,kBAA2C,CAAC,CAAC;YACxD,IAAI,OAAO,EAAE;cACX,OAAO,OAAO,CAAC;aAChB;YACD,IAAI,wBAAwB,EAAE;cAC5B,MAAM,IAAI,KAAK;gBAAC,yBAAyB,IAAI,CAAC,SAAS;kBAAC;gBAAkB,CAAC,kBAAkB,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;cAAE,CAAC,CAAC;aAC1H;YACD,OAAO,KAAK,CAAC;WACd,CAAC;WACD,IAAI,CAAC,6BAA6B,CACtC;;OACA,IAAI,CAAC,wBAAwB,CAAC,CAAC;GACnC,CAAC;EAEF,MAAM,MAAM,GAAW;IACrB,UAAkB;IAClB,EAAE,wBAAwB,EAAE,GAAG,EAAE,wBAAwB,EAAE,IAAI;EAAE;IAEjE,OAAO,UAAU;OACd,KAAK,CAAC,wBAAwB,CAAC;OAC/B,GAAG,CAAC,CAAC,cAAc;QAClB,cAAc;WACX,KAAK,CAAC,6BAA6B,CAAC;WACpC,GAAG,CAAC,CAAC,mBAAmB;YACvB,MAAM,SAAS,GACb,gBAAgB,CACd,mBAAoD,CACrD,CAAC;YACJ,IAAI,SAAS,EAAE;cACb,OAAO,SAAS,CAAC;aAClB;YACD,IAAI,wBAAwB,EAAE;cAC5B,MAAM,IAAI,KAAK;gBAAC,0BAA0B,IAAI,CAAC,SAAS;kBAAC;gBAAmB,CAAC,kBAAkB,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC;cAAE,CAAC,CAAC;aACpI;YACD,OAAO,KAAK,CAAC;WACd,CAAC;WACD,IAAI,CAAC,4BAA4B,CACrC;;OACA,IAAI,CAAC,uBAAuB,CAAC,CAAC;GAClC,CAAC;EAEF,OAAO;IACL,MAAM;IACN,MAAM;GACP,CAAC;AACJ;;;"}